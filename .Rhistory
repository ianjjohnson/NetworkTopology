data <- read.csv('stats.csv')
data$algorithm <- as.factor(data$algorithm)
data$sd_interference <- data$sd_interference^2
data$sd_hops <- data$sd_hops^2
data$sd_dist <- data$sd_dist^2
algorithm7 <- data[which(data$algorithm == 7),c("nodes", "interference", "sd_interference", "hops", "sd_hops", "distance", "sd_dist", "totalTraffic", "cluster")]
algorithm7 <- aggregate(algorithm7, by=list(algorithm7$nodes, algorithm7$cluster), FUN=mean)
algorithm7$sd_interference <- sqrt(algorithm7$sd_interference)
algorithm7$sd_hops <- sqrt(algorithm7$sd_hops)
algorithm7$sd_dist <- sqrt(algorithm7$sd_dist)
algorithm7$nodes <- NULL
algorithm7$cluster <- NULL
copytable(algorithm7)
source("http://michael.hahsler.net/SMU/EMIS7332/R/copytable.R")
copytable(algorithm7)
data <- read.csv('stats.csv')
data$algorithm <- as.factor(data$algorithm)
data$sd_interference <- data$sd_interference^2
data$sd_hops <- data$sd_hops^2
data$sd_dist <- data$sd_dist^2
algorithm5 <- data[which(data$algorithm == 5),c("nodes", "interference", "sd_interference", "hops", "sd_hops", "distance", "sd_dist", "totalTraffic", "cluster")]
algorithm5 <- aggregate(algorithm5, by=list(algorithm5$nodes, algorithm5$cluster), FUN=mean)
algorithm5$sd_interference <- sqrt(algorithm5$sd_interference)
algorithm5$sd_hops <- sqrt(algorithm5$sd_hops)
algorithm5$sd_dist <- sqrt(algorithm5$sd_dist)
algorithm5$nodes <- NULL
algorithm5$cluster <- NULL
copytable(algorithm5)
source("http://michael.hahsler.net/SMU/EMIS7332/R/copytable.R")
copytable(algorithm5)
copytable(algorithm5)
alg1 <- read.csv('1_NullAlgorithm.csv')
alg1 <- read.csv('1_NullAlgorithm.csv')
plot(alg1$interference, alg1$throughput)
alg2 <- read.csv('2_TravisAlgo.csv')
alg3 <- read.csv('3_TravisExtended.csv')
alg4 <- read.csv('4_ErikFullyRecursive.csv')
alg5 <- read.csv('5_ErikSemiRecursive.csv')
alg7 <- read.csv('7_IanRecurisve.csv')
alg8 <- read.csv('8_IanAlgo.csv')
alg1 <- read.csv('1_NullAlgorithm.csv')
alg2 <- read.csv('2_TravisAlgo.csv')
alg3 <- read.csv('3_TravisExtended.csv')
alg4 <- read.csv('4_ErikFullyRecursive.csv')
alg5 <- read.csv('5_ErikSemiRecursive.csv')
alg7 <- read.csv('7_IanRecursive.csv')
alg8 <- read.csv('8_IanAlgo.csv')
alg8 <- read.csv('8_IanAlgo.csv')
alg8 <- read.csv('8_IanAlgo.csv')
alg7 <- read.csv('7_IanRecursive.csv')
summary(alg8)
alg8 <- read.csv('8_IanAlgo.csv')
alg8 <- read.csv('8_IanAlgo.csv')
summary(alg8)
alg8 <- na.omit(alg8)
summary(alg8)
alg1 <- read.csv('1_NullAlgorithm.csv')
alg2 <- read.csv('2_TravisAlgo.csv')
alg3 <- read.csv('3_TravisExtended.csv')
alg4 <- read.csv('4_ErikFullyRecursive.csv')
alg5 <- read.csv('5_ErikSemiRecursive.csv')
alg7 <- read.csv('7_IanRecursive.csv')
alg8 <- read.csv('8_IanAlgo.csv')
all <- alg1[which(alg1$layout) == 'R']
all <- alg1[which(alg1$layout == 'R'),]
summary(all)
alg5 <- read.csv('5_ErikSemiRecursive.csv')
ll <- alg1[which(alg1$layout == 'R'),]
all <- rbind(all, alg2[which(alg2$layout == 'R'),])
all <- rbind(all, alg3[which(alg3$layout == 'R'),])
all <- rbind(all, alg4[which(alg4$layout == 'R'),])
all <- rbind(all, alg5[which(alg5$layout == 'R'),])
all <- rbind(all, alg7[which(alg7$layout == 'R'),])
all <- rbind(all, alg8[which(alg8$layout == 'R'),])
summary(all)
all$nodes
alg1 <- read.csv('1_NullAlgorithm.csv')
alg2 <- read.csv('2_TravisAlgo.csv')
alg3 <- read.csv('3_TravisExtended.csv')
alg4 <- read.csv('4_ErikFullyRecursive.csv')
alg5 <- read.csv('5_ErikSemiRecursive.csv')
alg7 <- read.csv('7_IanRecursive.csv')
alg8 <- read.csv('8_IanAlgo.csv')
all <- alg1[which(alg1$layout == 'R'),]
all <- rbind(all, alg2[which(alg2$layout == 'R'),])
all <- rbind(all, alg3[which(alg3$layout == 'R'),])
all <- rbind(all, alg4[which(alg4$layout == 'R'),])
all <- rbind(all, alg5[which(alg5$layout == 'R'),])
all <- rbind(all, alg7[which(alg7$layout == 'R'),])
all <- rbind(all, alg8[which(alg8$layout == 'R'),])
summary(all)
plot(all$nodes, all$throughput, type="layout")
alg1 <- read.csv('1_NullAlgorithm.csv')
alg2 <- read.csv('2_TravisAlgo.csv')
alg3 <- read.csv('3_TravisExtended.csv')
alg4 <- read.csv('4_ErikFullyRecursive.csv')
alg5 <- read.csv('5_ErikSemiRecursive.csv')
alg7 <- read.csv('7_IanRecursive.csv')
alg8 <- read.csv('8_IanAlgo.csv')
all <- alg1[which(alg1$layout == 'R'),]
all <- rbind(all, alg2[which(alg2$layout == 'R'),])
all <- rbind(all, alg3[which(alg3$layout == 'R'),])
all <- rbind(all, alg4[which(alg4$layout == 'R'),])
all <- rbind(all, alg5[which(alg5$layout == 'R'),])
all <- rbind(all, alg7[which(alg7$layout == 'R'),])
all <- rbind(all, alg8[which(alg8$layout == 'R'),])
alg2 <- read.csv('2_TravisAlgo.csv')
alg1 <- read.csv('1_NullAlgorithm.csv')
all <- alg1[which(alg1$layout == 'R'),]
all <- rbind(all, alg2[which(alg2$layout == 'R'),])
all <- rbind(all, alg3[which(alg3$layout == 'R'),])
all <- rbind(all, alg4[which(alg4$layout == 'R'),])
all <- rbind(all, alg5[which(alg5$layout == 'R'),])
all <- rbind(all, alg7[which(alg7$layout == 'R'),])
all <- rbind(all, alg8[which(alg8$layout == 'R'),])
plot(all$nodes, all$throughput)
plot(all$nodes, all$throughput, type="type")
plot(all$nodes, all$throughput, col="type")
plot(all$nodes, all$throughput, col=all$type)
plot(all$nodes, all$throughput, col=all$type, pch=20)
plot(all$nodes, all$throughput, col=all$type, pch=20, legend=rownames(summary(all$type)))
plot(all$nodes, all$throughput, col=all$type, pch=20, legend=rownames(all$type)))
plot(all$nodes, all$throughput, col=all$type, pch=20, legend=rownames(all$type))
summary(all$type)
rownames(summary(all$type))
plot(all$nodes, all$throughput, col=all$type, pch=20, legend=rownames(all$type))
rownames(all$type)
all$type
type(all$type)
mode(all$type)
class(all$type)
levels(all$type)
plot(all$nodes, all$throughput, col=all$type, pch=20, legend=levels(all$type))
e
plot(all$nodes, all$throughput, col=all$type, pch=20)
legend=levels(all$type)
legend(levels(all$type))
legend("topright", legend=levels(all$type))
legend("topright", legend=levels(all$type), col=all$type)
legend("topright", legend=levels(all$type), col=all$type, cex=.5)
plot(all$nodes, all$throughput, col=all$type, pch=20)
legend("topright", legend=levels(all$type), col=all$type, cex=.5)
plot(all$interference, all$throughput, col=all$type, pch=20)
plot(random$nodes, random$throughput, col=random$type, pch=20)
legend("topright", legend=levels(random$type), col=random$type, cex=.5)
random <- alg1[which(alg1$layout == 'R'),]
random <- rbind(random, alg2[which(alg2$layout == 'R'),])
random <- rbind(random, alg3[which(alg3$layout == 'R'),])
random <- rbind(random, alg4[which(alg4$layout == 'R'),])
random <- rbind(random, alg5[which(alg5$layout == 'R'),])
random <- rbind(random, alg7[which(alg7$layout == 'R'),])
random <- rbind(random, alg8[which(alg8$layout == 'R'),])
plot(random$nodes, random$throughput, col=random$type, pch=20)
legend("topright", legend=levels(random$type), col=random$type, cex=.5)
lines(stats::lowess(cars))
colors <- rainbow(random$type)
for (i in 1:max(random$nodes)) {
topology <- subset(random, nodes==i)
lines(topology$nodes, topology$throughput, type="b", lwd=1.5,
lty=linetype[i], col=colors[i], pch=plotchar[i])
}
linetype <- c(1:max(random$nodes))
plotchar <- seq(18,18+max(random$nodes),1)
for (i in 1:max(random$nodes)) {
topology <- subset(random, nodes==i)
lines(topology$nodes, topology$throughput, type="b", lwd=1.5,
lty=linetype[i], col=colors[i], pch=plotchar[i])
}
plot(random$nodes, random$throughput, col=random$type, pch=20, type=o)
plot(random$nodes, random$throughput, col=random$type, pch=20, type='o')
plot(random$interference, random$throughput, col=random$type, pch=20, type='o')
plot(alg1$interference, alg1$throughput, col='red', pch=20, type='o')
random <- alg1[which(alg1$layout == 'R'),]
plot(random$nodes, random$throughput, col=random$type, pch=20,type='o')
lines(t$throughput, type = "o", col = "blue")
lines(t, type = "o", col = "blue")
t <- alg2[which(alg2$layout == 'R'),]
type(t)
mode(t)
class(t)
library(ggplot2)
random <- alg1[which(alg1$layout == 'R'),]
random <- rbind(random, alg2[which(alg2$layout == 'R'),])
random <- rbind(random, alg3[which(alg3$layout == 'R'),])
random <- rbind(random, alg4[which(alg4$layout == 'R'),])
random <- rbind(random, alg5[which(alg5$layout == 'R'),])
random <- rbind(random, alg7[which(alg7$layout == 'R'),])
random <- rbind(random, alg8[which(alg8$layout == 'R'),])
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line() +
ylab(label="Number of new members") +
xlab("Week Number") +
scale_colour_manual(values=c("grey", "blue"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line() +
ylab(label="Number of new members") +
xlab("Week Number") +
scale_colour_manual(values=c("grey", "blue", "red", "black", "yellow", "cyan", "orange"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line() +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("grey", "blue", "red", "black", "yellow", "cyan", "orange"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line() +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "yellow", "orange", "purple"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line() +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line(size=1.5) +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
ggplot(random, aes(x = nodes, y = throughput, colour = type)) +
geom_line(size=1) +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
ggplot(random, aes(x = interference, y = throughput, colour = type)) +
geom_line(size=1) +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
ggplot(random, aes(x = hops, y = interference, colour = type)) +
geom_line(size=1) +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
ggplot(random, aes(x = nodes, y = hops, colour = type)) +
geom_line(size=1) +
ylab(label="Throughput") +
xlab("Nodes") +
scale_colour_manual(values=c("black", "blue", "red", "grey", "green", "orange", "purple"))
